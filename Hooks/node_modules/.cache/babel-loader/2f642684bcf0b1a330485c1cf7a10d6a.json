{"ast":null,"code":"var _jsxFileName = \"/home/cd/trybe-projects/sd-05-project-starwars-datatable-hooks/src/components/Table.js\";\nimport HeaderTable from './HeaderTable';\nimport { datafilterfunction } from './Dropfilters';\nimport React, { useEffect, useContext } from 'react';\nimport { StarWarsContext } from '../context/starWarsContext'; // import FetchData from '../services/API';\n\nconst apiUrl = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nfunction FetchData() {\n  // const { setData } = useContext(StarWarsContext);\n  return fetch(apiUrl).then(response => response.json()).then(data => data.results, error => {\n    console.log(`erro: ${error.message}`);\n  });\n}\n\n;\n\nconst Table = () => {\n  const {\n    data,\n    setData,\n    name,\n    filterByNumericValues\n  } = useContext(StarWarsContext);\n  useEffect(() => {\n    FetchData().then(dataApi => setData(dataApi));\n  }, []);\n  const NameFilteredPlanets = data.filter(planets => planets.name.includes(name)); // ((filterByNumericValues) ?\n  //          (datafilterfunction(NameFilteredPlanets, filterByNumericValues)) : NameFilteredPlanets)\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, !data && /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 15\n    }\n  }, \"Error fetching data!\"), /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(HeaderTable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), data && NameFilteredPlanets.map(planet => /*#__PURE__*/React.createElement(\"tbody\", {\n    key: planet.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 36\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, planet.name), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, planet.rotation_period), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, planet.orbital_period), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, planet.diameter), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, planet.climate), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, planet.gravity), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, planet.terrain), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, planet.surface_water), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, planet.population), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, planet.films), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, planet.created), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, planet.edited), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, planet.url))))));\n}; // const mapDispatchToProps = (dispatch) => ({\n//   handleFetch: (e) => dispatch(handleGoFetch(e)),\n// });\n// const mapStateToProps = (state) => ({\n//   isfetching: state.fetchReducer.isfetching,\n//   data: state.fetchReducer.data,\n//   filterByName: state.filters.filterByName.name,\n//   filterByNumericValues: state.filters.filterByNumericValues,\n// });\n\n\nexport default Table; // Table.propTypes = {\n//   isfetching: propTypes.bool.isRequired,\n//   data: propTypes.arrayOf(propTypes.object).isRequired,\n//   handleFetch: propTypes.func.isRequired,\n//   filterByName: propTypes.string.isRequired,\n//   filterByNumericValues: propTypes.arrayOf(propTypes.object).isRequired,\n// };","map":{"version":3,"sources":["/home/cd/trybe-projects/sd-05-project-starwars-datatable-hooks/src/components/Table.js"],"names":["HeaderTable","datafilterfunction","React","useEffect","useContext","StarWarsContext","apiUrl","FetchData","fetch","then","response","json","data","results","error","console","log","message","Table","setData","name","filterByNumericValues","dataApi","NameFilteredPlanets","filter","planets","includes","map","planet","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url"],"mappings":"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","sourcesContent":["import HeaderTable from './HeaderTable';\nimport { datafilterfunction } from './Dropfilters';\n\nimport React, { useEffect, useContext } from 'react';\nimport { StarWarsContext } from '../context/starWarsContext';\n// import FetchData from '../services/API';\n\nconst apiUrl = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nfunction FetchData() {\n  // const { setData } = useContext(StarWarsContext);\n  return fetch(apiUrl)\n    .then((response) => response.json())\n    .then(\n      (data) => data.results,\n      (error) => { console.log(`erro: ${error.message}`) },\n    );\n};\n\nconst Table = () => {\n  const { data, setData, name, filterByNumericValues } = useContext(StarWarsContext);\n  useEffect(() => {\n    FetchData().then((dataApi) => setData(dataApi));\n  }, []);\n\n  const NameFilteredPlanets = data.filter((planets) => planets.name.includes(name));\n  // ((filterByNumericValues) ?\n  //          (datafilterfunction(NameFilteredPlanets, filterByNumericValues)) : NameFilteredPlanets)\n  \n  return (\n    <div>\n    {!data && <h2>Error fetching data!</h2>}\n    <table>\n      <HeaderTable />\n      {data && NameFilteredPlanets\n        .map((planet) => (\n          <tbody key={planet.name}><tr>\n            <td >{planet.name}</td>\n            <td>{planet.rotation_period}</td>\n            <td>{planet.orbital_period}</td>\n            <td>{planet.diameter}</td>\n            <td>{planet.climate}</td>\n            <td>{planet.gravity}</td>\n            <td>{planet.terrain}</td>\n            <td>{planet.surface_water}</td>\n            <td>{planet.population}</td>\n            <td>{planet.films}</td>\n            <td>{planet.created}</td>\n            <td>{planet.edited}</td>\n            <td>{planet.url}</td>\n        </tr></tbody>\n      ))}\n    </table></div>\n  );\n}\n\n// const mapDispatchToProps = (dispatch) => ({\n//   handleFetch: (e) => dispatch(handleGoFetch(e)),\n// });\n\n// const mapStateToProps = (state) => ({\n//   isfetching: state.fetchReducer.isfetching,\n//   data: state.fetchReducer.data,\n//   filterByName: state.filters.filterByName.name,\n//   filterByNumericValues: state.filters.filterByNumericValues,\n// });\n\nexport default Table;\n\n// Table.propTypes = {\n//   isfetching: propTypes.bool.isRequired,\n//   data: propTypes.arrayOf(propTypes.object).isRequired,\n//   handleFetch: propTypes.func.isRequired,\n//   filterByName: propTypes.string.isRequired,\n//   filterByNumericValues: propTypes.arrayOf(propTypes.object).isRequired,\n// };\n"]},"metadata":{},"sourceType":"module"}