{"ast":null,"code":"var _jsxFileName = \"/home/cd/trybe-projects/sd-05-project-starwars-datatable-hooks/src/components/Table.js\";\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { handleGoFetch } from '../reducers';\nimport HeaderTable from './HeaderTable';\nimport datafilterfunction from '../dfilters';\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      test: 'HelloWorld'\n    };\n  }\n\n  componentDidMount() {\n    const {\n      handleFetch\n    } = this.props;\n    handleFetch();\n  }\n\n  render() {\n    const {\n      isfetching,\n      data,\n      filterByName,\n      filterByNumericValues\n    } = this.props;\n    const NameFilteredPlanets = data.filter(planets => planets.name.includes(filterByName));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    }, isfetching && /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 24\n      }\n    }, \"Loading...\"), !data && /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 19\n      }\n    }, \"Error fetching data!\"), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(HeaderTable, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 16\n      }\n    }), !isfetching && (filterByNumericValues.length > 0 ? datafilterfunction(NameFilteredPlanets, filterByNumericValues) : NameFilteredPlanets).map(planet => /*#__PURE__*/React.createElement(\"tbody\", {\n      key: planet.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 38\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 15\n      }\n    }, planet.name), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 15\n      }\n    }, planet.rotation_period), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 15\n      }\n    }, planet.orbital_period), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }\n    }, planet.diameter), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }\n    }, planet.climate), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 15\n      }\n    }, planet.gravity), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }\n    }, planet.terrain), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }\n    }, planet.surface_water), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 15\n      }\n    }, planet.population), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 15\n      }\n    }, planet.films), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }\n    }, planet.created), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 15\n      }\n    }, planet.edited), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 15\n      }\n    }, planet.url))))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  handleFetch: e => dispatch(handleGoFetch(e))\n});\n\nconst mapStateToProps = state => ({\n  isfetching: state.fetchReducer.isfetching,\n  data: state.fetchReducer.data,\n  filterByName: state.filters.filterByName.name,\n  filterByNumericValues: state.filters.filterByNumericValues\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\nTable.propTypes = {\n  isfetching: propTypes.bool.isRequired,\n  data: propTypes.arrayOf(propTypes.object).isRequired,\n  handleFetch: propTypes.func.isRequired,\n  filterByName: propTypes.string.isRequired,\n  filterByNumericValues: propTypes.arrayOf(propTypes.object).isRequired\n}; // Disscussed and did some pair programing with Paulo D'Andrea on this code","map":{"version":3,"sources":["/home/cd/trybe-projects/sd-05-project-starwars-datatable-hooks/src/components/Table.js"],"names":["propTypes","React","Component","connect","handleGoFetch","HeaderTable","datafilterfunction","Table","constructor","props","state","test","componentDidMount","handleFetch","render","isfetching","data","filterByName","filterByNumericValues","NameFilteredPlanets","filter","planets","name","includes","length","map","planet","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url","mapDispatchToProps","dispatch","e","mapStateToProps","fetchReducer","filters","bool","isRequired","arrayOf","object","func","string"],"mappings":"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","sourcesContent":["import propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { handleGoFetch } from '../reducers';\nimport HeaderTable from './HeaderTable';\nimport datafilterfunction from '../dfilters';\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { test: 'HelloWorld' };\n  }\n\n  componentDidMount() {\n    const { handleFetch } = this.props;\n    handleFetch();\n  }\n\n  render() {\n    const { isfetching, data, filterByName, filterByNumericValues } = this.props;\n    const NameFilteredPlanets = data.filter((planets) => planets.name.includes(filterByName));\n    return (\n      <div>\n        {isfetching && <h1>Loading...</h1>}\n        {!data && <h2>Error fetching data!</h2>}\n        <table><HeaderTable />\n          {!isfetching &&\n          ((filterByNumericValues.length > 0) ?\n            (datafilterfunction(NameFilteredPlanets, filterByNumericValues)) : NameFilteredPlanets)\n          .map((planet) => (\n            <tbody key={planet.name}><tr>\n              <td >{planet.name}</td>\n              <td>{planet.rotation_period}</td>\n              <td>{planet.orbital_period}</td>\n              <td>{planet.diameter}</td>\n              <td>{planet.climate}</td>\n              <td>{planet.gravity}</td>\n              <td>{planet.terrain}</td>\n              <td>{planet.surface_water}</td>\n              <td>{planet.population}</td>\n              <td>{planet.films}</td>\n              <td>{planet.created}</td>\n              <td>{planet.edited}</td>\n              <td>{planet.url}</td>\n            </tr></tbody>\n          ))}\n        </table></div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleFetch: (e) => dispatch(handleGoFetch(e)),\n});\n\nconst mapStateToProps = (state) => ({\n  isfetching: state.fetchReducer.isfetching,\n  data: state.fetchReducer.data,\n  filterByName: state.filters.filterByName.name,\n  filterByNumericValues: state.filters.filterByNumericValues,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n\nTable.propTypes = {\n  isfetching: propTypes.bool.isRequired,\n  data: propTypes.arrayOf(propTypes.object).isRequired,\n  handleFetch: propTypes.func.isRequired,\n  filterByName: propTypes.string.isRequired,\n  filterByNumericValues: propTypes.arrayOf(propTypes.object).isRequired,\n};\n\n// Disscussed and did some pair programing with Paulo D'Andrea on this code\n"]},"metadata":{},"sourceType":"module"}