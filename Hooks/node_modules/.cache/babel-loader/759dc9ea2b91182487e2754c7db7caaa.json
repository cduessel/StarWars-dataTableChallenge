{"ast":null,"code":"var _jsxFileName = \"/home/cd/trybe-projects/sd-05-project-starwars-datatable-hooks/src/components/Table.js\";\n// import propTypes from 'prop-types';\n// import { connect } from 'react-redux';\n// import { handleGoFetch } from '../reducers';\nimport HeaderTable from './HeaderTable';\nimport { datafilterfunction } from './Dropfilters';\nimport React, { useEffect, useContext } from 'react';\nimport { StarWarsContext } from '../context/starWarsContext';\nimport FetchData from '../services/API';\n\nconst Table = () => {\n  const {\n    isfetching,\n    data,\n    setData,\n    name,\n    filterByNumericValues\n  } = useContext(StarWarsContext);\n  useEffect(() => {\n    FetchData().then(data => setData(data));\n  }, []);\n  const NameFilteredPlanets = data.filter(planets => planets.name.includes(name));\n  return (\n    /*#__PURE__*/\n    // const { isfetching, data, filterByName, filterByNumericValues } = this.props;\n    // return (\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }\n    }, !data && /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 19\n      }\n    }, \"Error fetching data!\"), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(HeaderTable, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 16\n      }\n    }), data && (filterByNumericValues ? datafilterfunction(NameFilteredPlanets, filterByNumericValues) : NameFilteredPlanets).map(planet => /*#__PURE__*/React.createElement(\"tbody\", {\n      key: planet.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 38\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 15\n      }\n    }, planet.name), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 15\n      }\n    }, planet.rotation_period), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 15\n      }\n    }, planet.orbital_period), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }\n    }, planet.diameter), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }\n    }, planet.climate), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 15\n      }\n    }, planet.gravity), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }\n    }, planet.terrain), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }\n    }, planet.surface_water), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 15\n      }\n    }, planet.population), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 15\n      }\n    }, planet.films), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }\n    }, planet.created), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 15\n      }\n    }, planet.edited), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 15\n      }\n    }, planet.url))))))\n  );\n}; // const mapDispatchToProps = (dispatch) => ({\n//   handleFetch: (e) => dispatch(handleGoFetch(e)),\n// });\n// const mapStateToProps = (state) => ({\n//   isfetching: state.fetchReducer.isfetching,\n//   data: state.fetchReducer.data,\n//   filterByName: state.filters.filterByName.name,\n//   filterByNumericValues: state.filters.filterByNumericValues,\n// });\n\n\nexport default Table; // Table.propTypes = {\n//   isfetching: propTypes.bool.isRequired,\n//   data: propTypes.arrayOf(propTypes.object).isRequired,\n//   handleFetch: propTypes.func.isRequired,\n//   filterByName: propTypes.string.isRequired,\n//   filterByNumericValues: propTypes.arrayOf(propTypes.object).isRequired,\n// };","map":{"version":3,"sources":["/home/cd/trybe-projects/sd-05-project-starwars-datatable-hooks/src/components/Table.js"],"names":["HeaderTable","datafilterfunction","React","useEffect","useContext","StarWarsContext","FetchData","Table","isfetching","data","setData","name","filterByNumericValues","then","NameFilteredPlanets","filter","planets","includes","map","planet","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url"],"mappings":"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","sourcesContent":["// import propTypes from 'prop-types';\n// import { connect } from 'react-redux';\n// import { handleGoFetch } from '../reducers';\nimport HeaderTable from './HeaderTable';\nimport { datafilterfunction } from './Dropfilters';\n\nimport React, { useEffect, useContext } from 'react';\nimport { StarWarsContext } from '../context/starWarsContext';\nimport FetchData from '../services/API';\n\nconst Table = () => {\n\n  const { isfetching, data, setData, name, filterByNumericValues } = useContext(StarWarsContext);\n  \n  useEffect(() => {\n    FetchData().then((data) => setData(data))\n  },[])\n\n  const NameFilteredPlanets = data.filter((planets) => planets.name.includes(name));\n  \n  return (\n    // const { isfetching, data, filterByName, filterByNumericValues } = this.props;\n    // return (\n      <div>\n        {!data && <h2>Error fetching data!</h2>}\n        <table><HeaderTable />\n          {data &&\n          ((filterByNumericValues) ?\n            (datafilterfunction(NameFilteredPlanets, filterByNumericValues)) : NameFilteredPlanets)\n          .map((planet) => (\n            <tbody key={planet.name}><tr>\n              <td >{planet.name}</td>\n              <td>{planet.rotation_period}</td>\n              <td>{planet.orbital_period}</td>\n              <td>{planet.diameter}</td>\n              <td>{planet.climate}</td>\n              <td>{planet.gravity}</td>\n              <td>{planet.terrain}</td>\n              <td>{planet.surface_water}</td>\n              <td>{planet.population}</td>\n              <td>{planet.films}</td>\n              <td>{planet.created}</td>\n              <td>{planet.edited}</td>\n              <td>{planet.url}</td>\n            </tr></tbody>\n          ))}\n        </table></div>\n  );\n}\n\n// const mapDispatchToProps = (dispatch) => ({\n//   handleFetch: (e) => dispatch(handleGoFetch(e)),\n// });\n\n// const mapStateToProps = (state) => ({\n//   isfetching: state.fetchReducer.isfetching,\n//   data: state.fetchReducer.data,\n//   filterByName: state.filters.filterByName.name,\n//   filterByNumericValues: state.filters.filterByNumericValues,\n// });\n\nexport default Table;\n\n// Table.propTypes = {\n//   isfetching: propTypes.bool.isRequired,\n//   data: propTypes.arrayOf(propTypes.object).isRequired,\n//   handleFetch: propTypes.func.isRequired,\n//   filterByName: propTypes.string.isRequired,\n//   filterByNumericValues: propTypes.arrayOf(propTypes.object).isRequired,\n// };\n"]},"metadata":{},"sourceType":"module"}