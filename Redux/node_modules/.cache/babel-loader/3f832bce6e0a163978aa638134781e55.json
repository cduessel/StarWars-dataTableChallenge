{"ast":null,"code":"var _jsxFileName = \"/home/cd/trybe-projects/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js\";\nimport React, { Component } from 'react';\nimport { handleFetch } from '../reducers';\nimport { connect } from 'react-redux';\n\nclass Table extends Component {\n  constructor(props) {\n    super(props); // this.state = { test: 'api' };\n  }\n\n  componentDidMount() {\n    const handleFetch = this.props.handleFetch;\n    handleFetch();\n  } // renderLoading() {\n  //   if(this.props.isfetching) return <div>Loading...</div>;\n  // }\n\n\n  render() {\n    const _this$props = this.props,\n          isfetching = _this$props.isfetching,\n          data = _this$props.data;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, isfetching && React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"Loading...\"), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"rotation period\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"orbital period\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"diameter\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"climate\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"gravity\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"terrain\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"surface_water\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"population\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"films\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"created\"))), !isfetching && data.map(planet => React.createElement(\"tbody\", {\n      key: planet.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, planet.name), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, planet.rotation_period), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, planet.orbital_period), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, planet.diameter), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, planet.climate), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, planet.gravity), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, planet.terrain), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, planet.surface_water), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, planet.population), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, planet.films), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, planet.created))))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  handleAsync: e => dispatch(handleFetch(e))\n});\n\nconst mapStateToProps = state => ({\n  isfetching: state.emptyReducer.isfetching,\n  data: state.emptyReducer.data\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table); // climate: \"arid\"\n// created: \"2014-12-09T13:50:49.641000Z\"\n// diameter: \"10465\"\n// edited: \"2014-12-20T20:58:18.411000Z\"\n// films: (5) [\"https://swapi-trybe.herokuapp.com/api/films/1/\", \"https://swapi-trybe.herokuapp.com/api/films/3/\", \"https://swapi-trybe.herokuapp.com/api/films/4/\", \"https://swapi-trybe.herokuapp.com/api/films/5/\", \"https://swapi-trybe.herokuapp.com/api/films/6/\"]\n// gravity: \"1 standard\"\n// name: \"Tatooine\"\n// orbital_period: \"304\"\n// population: \"200000\"\n// residents: (10) [\"https://swapi-trybe.herokuapp.com/api/people/1/\", \"https://swapi-trybe.herokuapp.com/api/people/2/\", \"https://swapi-trybe.herokuapp.com/api/people/4/\", \"https://swapi-trybe.herokuapp.com/api/people/6/\", \"https://swapi-trybe.herokuapp.com/api/people/7/\", \"https://swapi-trybe.herokuapp.com/api/people/8/\", \"https://swapi-trybe.herokuapp.com/api/people/9/\", \"https://swapi-trybe.herokuapp.com/api/people/11/\", \"https://swapi-trybe.herokuapp.com/api/people/43/\", \"https://swapi-trybe.herokuapp.com/api/people/62/\"]\n// rotation_period: \"23\"\n// surface_water: \"1\"\n// terrain: \"desert\"\n// url: \"https://swapi-trybe.herokuapp.com/api/planets/1/\"","map":{"version":3,"sources":["/home/cd/trybe-projects/sd-05-block16-project-react-redux-starwars-database-filters/src/components/Table.js"],"names":["React","Component","handleFetch","connect","Table","constructor","props","componentDidMount","render","isfetching","data","map","planet","name","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","mapDispatchToProps","dispatch","handleAsync","e","mapStateToProps","state","emptyReducer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { handleFetch } from '../reducers';\nimport { connect } from 'react-redux';\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    // this.state = { test: 'api' };\n  }\n\n  componentDidMount() {\n    const { handleFetch } = this.props;\n\n    handleFetch();\n  }\n\n  // renderLoading() {\n  //   if(this.props.isfetching) return <div>Loading...</div>;\n  // }\n\n  render() {\n    const { isfetching, data } = this.props;\n    return (\n      <div>\n        \n        {isfetching && <h1>Loading...</h1>}\n\n        <table>\n        <thead>\n          <tr>\n            <th>name</th>\n            <th>rotation period</th>\n            <th>orbital period</th>\n            <th>diameter</th>\n            <th>climate</th>\n            <th>gravity</th>\n            <th>terrain</th>\n            <th>surface_water</th>\n            <th>population</th>\n            <th>films</th>\n            <th>created</th>\n          </tr>\n          </thead>\n          {!isfetching && data.map(planet => (\n            <tbody key={planet.name}>\n              <tr>\n                <td >{planet.name}</td>\n                <td>{planet.rotation_period}</td>\n                <td>{planet.orbital_period}</td>\n                <td>{planet.diameter}</td>\n                <td>{planet.climate}</td>\n                <td>{planet.gravity}</td>\n                <td>{planet.terrain}</td>\n                <td>{planet.surface_water}</td>\n                <td>{planet.population}</td>\n                <td>{planet.films}</td>\n                <td>{planet.created}</td>\n              </tr>\n            </tbody>\n          ))}\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleAsync: (e) => dispatch(handleFetch(e)),\n});\n\nconst mapStateToProps = (state) => ({\n  isfetching: state.emptyReducer.isfetching,\n  data: state.emptyReducer.data,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n\n\n// climate: \"arid\"\n// created: \"2014-12-09T13:50:49.641000Z\"\n// diameter: \"10465\"\n// edited: \"2014-12-20T20:58:18.411000Z\"\n// films: (5) [\"https://swapi-trybe.herokuapp.com/api/films/1/\", \"https://swapi-trybe.herokuapp.com/api/films/3/\", \"https://swapi-trybe.herokuapp.com/api/films/4/\", \"https://swapi-trybe.herokuapp.com/api/films/5/\", \"https://swapi-trybe.herokuapp.com/api/films/6/\"]\n// gravity: \"1 standard\"\n// name: \"Tatooine\"\n// orbital_period: \"304\"\n// population: \"200000\"\n// residents: (10) [\"https://swapi-trybe.herokuapp.com/api/people/1/\", \"https://swapi-trybe.herokuapp.com/api/people/2/\", \"https://swapi-trybe.herokuapp.com/api/people/4/\", \"https://swapi-trybe.herokuapp.com/api/people/6/\", \"https://swapi-trybe.herokuapp.com/api/people/7/\", \"https://swapi-trybe.herokuapp.com/api/people/8/\", \"https://swapi-trybe.herokuapp.com/api/people/9/\", \"https://swapi-trybe.herokuapp.com/api/people/11/\", \"https://swapi-trybe.herokuapp.com/api/people/43/\", \"https://swapi-trybe.herokuapp.com/api/people/62/\"]\n// rotation_period: \"23\"\n// surface_water: \"1\"\n// terrain: \"desert\"\n// url: \"https://swapi-trybe.herokuapp.com/api/planets/1/\"\n"]},"metadata":{},"sourceType":"module"}