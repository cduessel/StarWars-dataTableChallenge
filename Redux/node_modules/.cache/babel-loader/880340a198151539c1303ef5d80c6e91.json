{"ast":null,"code":"import _objectSpread from \"/home/cd/trybe-projects/sd-05-block16-project-react-redux-starwars-database-filters/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nconst IS_REQUESTING = 'IS_REQUESTING';\nconst ADD_DATA = 'ADD_DATA';\nconst ADD_ERROR = 'ADD_ERROR';\n\nconst isRequesting = () => ({\n  type: IS_REQUESTING\n});\n\nconst dataActionCreator = json => ({\n  type: ADD_DATA,\n  data: json\n});\n\nconst errorActionCreator = error => ({\n  type: ADD_ERROR,\n  error\n});\n\nconst initialState = {\n  data: [],\n  isfetching: false\n};\nconst apiUrl = 'https://swapi-trybe.herokuapp.com/api/planets/';\nexport function handleAsyncFetch(extension) {\n  return dispatch => {\n    dispatch(isRequesting());\n    return fetch(apiUrl).then(response => response.json()).then(json => {\n      console.log(json.results);\n      return dispatch(dataActionCreator(json.results));\n    }, error => {\n      console.log('ta tudo errado: ' + error);\n      dispatch(errorActionCreator(error));\n    });\n  };\n}\n\nfunction emptyReducer(state = initialState, action) {\n  switch (action.type) {\n    case IS_REQUESTING:\n      return _objectSpread({}, state, {\n        isfetching: true\n      });\n\n    case ADD_DATA:\n      return _objectSpread({}, state, {\n        data: action.data,\n        isfetching: false\n      });\n\n    case ADD_ERROR:\n      return _objectSpread({}, state, {\n        error: action.error,\n        isfetching: false\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({\n  emptyReducer\n});\nconst store = createStore(rootReducer, applyMiddleware(thunk));\nexport default store; // export function thunkCharacter(name) {\n//   return (dispatch) => {\n//     dispatch(isRequesting(name));\n//     return charAPI(name)\n//       .then(\n//         (character) => dispatch(searchSuccess(character)),\n//         (error) => dispatch(searchFailure(error.message)),\n//       );\n//   };\n// };\n// export const charAPI = () => (\n//   fetch(`${ISS_BASE_API}/iss-now.json`)\n//     .then((response) => (\n//       response\n//         .json()\n//         .then((json) => (response.ok ? Promise.resolve(json) : Promise.reject(json)))\n//     ))\n// );","map":{"version":3,"sources":["/home/cd/trybe-projects/sd-05-block16-project-react-redux-starwars-database-filters/src/reducers/index.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","IS_REQUESTING","ADD_DATA","ADD_ERROR","isRequesting","type","dataActionCreator","json","data","errorActionCreator","error","initialState","isfetching","apiUrl","handleAsyncFetch","extension","dispatch","fetch","then","response","console","log","results","emptyReducer","state","action","rootReducer","store"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,SAAS,GAAG,WAAlB;;AAEA,MAAMC,YAAY,GAAG,OAAO;AAC1BC,EAAAA,IAAI,EAAEJ;AADoB,CAAP,CAArB;;AAIA,MAAMK,iBAAiB,GAAIC,IAAD,KAAW;AACnCF,EAAAA,IAAI,EAAEH,QAD6B;AAEnCM,EAAAA,IAAI,EAAED;AAF6B,CAAX,CAA1B;;AAKA,MAAME,kBAAkB,GAAIC,KAAD,KAAY;AACrCL,EAAAA,IAAI,EAAEF,SAD+B;AAErCO,EAAAA;AAFqC,CAAZ,CAA3B;;AAMA,MAAMC,YAAY,GAAG;AACnBH,EAAAA,IAAI,EAAE,EADa;AAEnBI,EAAAA,UAAU,EAAE;AAFO,CAArB;AAKA,MAAMC,MAAM,GAAG,gDAAf;AAEA,OAAO,SAASC,gBAAT,CAA0BC,SAA1B,EAAqC;AAC1C,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACZ,YAAY,EAAb,CAAR;AAEA,WAAOa,KAAK,CAACJ,MAAD,CAAL,CACJK,IADI,CACEC,QAAD,IAAcA,QAAQ,CAACZ,IAAT,EADf,EAEJW,IAFI,CAGFX,IAAD,IAAU;AACRa,MAAAA,OAAO,CAACC,GAAR,CAAYd,IAAI,CAACe,OAAjB;AACA,aAAON,QAAQ,CAACV,iBAAiB,CAACC,IAAI,CAACe,OAAN,CAAlB,CAAf;AACD,KANE,EAOFZ,KAAD,IAAW;AACTU,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBX,KAAjC;AACAM,MAAAA,QAAQ,CAACP,kBAAkB,CAACC,KAAD,CAAnB,CAAR;AACD,KAVE,CAAP;AAYD,GAfD;AAgBD;;AAED,SAASa,YAAT,CAAsBC,KAAK,GAAGb,YAA9B,EAA4Cc,MAA5C,EAAoD;AAClD,UAAQA,MAAM,CAACpB,IAAf;AACE,SAAKJ,aAAL;AACE,+BAAYuB,KAAZ;AAAmBZ,QAAAA,UAAU,EAAE;AAA/B;;AACF,SAAKV,QAAL;AACE,+BAAYsB,KAAZ;AAAmBhB,QAAAA,IAAI,EAAEiB,MAAM,CAACjB,IAAhC;AAAsCI,QAAAA,UAAU,EAAE;AAAlD;;AACF,SAAKT,SAAL;AACE,+BAAYqB,KAAZ;AAAmBd,QAAAA,KAAK,EAAEe,MAAM,CAACf,KAAjC;AAAwCE,QAAAA,UAAU,EAAE;AAApD;;AAEF;AACE,aAAOY,KAAP;AATJ;AAWD;;AACD,MAAME,WAAW,GAAG5B,eAAe,CAAC;AAAEyB,EAAAA;AAAF,CAAD,CAAnC;AACA,MAAMI,KAAK,GAAG9B,WAAW,CAAC6B,WAAD,EAAc3B,eAAe,CAACC,KAAD,CAA7B,CAAzB;AAEA,eAAe2B,KAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nconst IS_REQUESTING = 'IS_REQUESTING';\nconst ADD_DATA = 'ADD_DATA';\nconst ADD_ERROR = 'ADD_ERROR';\n\nconst isRequesting = () => ({\n  type: IS_REQUESTING,\n});\n\nconst dataActionCreator = (json) => ({\n  type: ADD_DATA,\n  data: json,\n});\n\nconst errorActionCreator = (error) => ({\n  type: ADD_ERROR,\n  error,\n});\n\n\nconst initialState = {\n  data: [],\n  isfetching: false,\n};\n\nconst apiUrl = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nexport function handleAsyncFetch(extension) {\n  return (dispatch) => {\n    dispatch(isRequesting());\n\n    return fetch(apiUrl)\n      .then((response) => response.json())\n      .then(\n        (json) => {\n          console.log(json.results);\n          return dispatch(dataActionCreator(json.results));\n        },\n        (error) => {\n          console.log('ta tudo errado: ' + error);\n          dispatch(errorActionCreator(error));\n        },\n      );\n  };\n}\n\nfunction emptyReducer(state = initialState, action) {\n  switch (action.type) {\n    case IS_REQUESTING:\n      return { ...state, isfetching: true}\n    case ADD_DATA:\n      return { ...state, data: action.data, isfetching: false };\n    case ADD_ERROR:\n      return { ...state, error: action.error, isfetching: false };\n\n    default:\n      return state;\n  }\n}\nconst rootReducer = combineReducers({ emptyReducer });\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n\n// export function thunkCharacter(name) {\n//   return (dispatch) => {\n//     dispatch(isRequesting(name));\n//     return charAPI(name)\n//       .then(\n//         (character) => dispatch(searchSuccess(character)),\n//         (error) => dispatch(searchFailure(error.message)),\n//       );\n//   };\n// };\n\n// export const charAPI = () => (\n//   fetch(`${ISS_BASE_API}/iss-now.json`)\n//     .then((response) => (\n//       response\n//         .json()\n//         .then((json) => (response.ok ? Promise.resolve(json) : Promise.reject(json)))\n//     ))\n// );"]},"metadata":{},"sourceType":"module"}