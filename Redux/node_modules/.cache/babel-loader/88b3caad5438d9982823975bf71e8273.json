{"ast":null,"code":"import _objectSpread from \"/home/cd/trybe-projects/sd-05-block16-project-react-redux-starwars-database-filters/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nconst IS_FETCHING = 'IS_FETCHING';\nconst FETCH_SUCCESS = 'FETCH_SUCCESS';\nconst FETCH_ERROR = 'FETCH_ERROR';\n\nconst isFetching = () => ({\n  type: IS_FETCHING\n});\n\nconst fetchDataActionCreator = json => ({\n  type: FETCH_SUCCESS,\n  data: json\n});\n\nconst fetchErrorActionCreator = error => ({\n  type: FETCH_ERROR,\n  error\n});\n\nconst initialState = {\n  data: [],\n  isfetching: false\n};\nconst apiUrl = 'https://swapi-trybe.herokuapp.com/api/planets/';\nexport function handleFetch() {\n  return dispatch => {\n    dispatch(isFetching());\n    return fetch(apiUrl).then(response => response.json()).then(json => {\n      // console.log(json.results);\n      return dispatch(fetchDataActionCreator(json.results));\n    }, error => {\n      console.log(`erro: ${error.message}`);\n      dispatch(fetchErrorActionCreator(error));\n    });\n  };\n}\n\nfunction fetchReducer(state = initialState, action) {\n  switch (action.type) {\n    case IS_FETCHING:\n      return _objectSpread({}, state, {\n        isfetching: true\n      });\n\n    case FETCH_SUCCESS:\n      return _objectSpread({}, state, {\n        data: action.data,\n        isfetching: false\n      });\n\n    case FETCH_ERROR:\n      return _objectSpread({}, state, {\n        error: action.error,\n        isfetching: false\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({\n  fetchReducer\n});\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\nexport default store; // Disscussed and did some pair programing with Paulo D'Andrea on this code\n// For the thunk used/got inspiration on \"doguinho app\" and \"game of thrones App\" of the TrybeCourse","map":{"version":3,"sources":["/home/cd/trybe-projects/sd-05-block16-project-react-redux-starwars-database-filters/src/reducers/index.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","IS_FETCHING","FETCH_SUCCESS","FETCH_ERROR","isFetching","type","fetchDataActionCreator","json","data","fetchErrorActionCreator","error","initialState","isfetching","apiUrl","handleFetch","dispatch","fetch","then","response","results","console","log","message","fetchReducer","state","action","rootReducer","store"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,WAAW,GAAG,aAApB;;AAEA,MAAMC,UAAU,GAAG,OAAO;AACxBC,EAAAA,IAAI,EAAEJ;AADkB,CAAP,CAAnB;;AAIA,MAAMK,sBAAsB,GAAIC,IAAD,KAAW;AACxCF,EAAAA,IAAI,EAAEH,aADkC;AAExCM,EAAAA,IAAI,EAAED;AAFkC,CAAX,CAA/B;;AAKA,MAAME,uBAAuB,GAAIC,KAAD,KAAY;AAC1CL,EAAAA,IAAI,EAAEF,WADoC;AAE1CO,EAAAA;AAF0C,CAAZ,CAAhC;;AAKA,MAAMC,YAAY,GAAG;AACnBH,EAAAA,IAAI,EAAE,EADa;AAEnBI,EAAAA,UAAU,EAAE;AAFO,CAArB;AAKA,MAAMC,MAAM,GAAG,gDAAf;AAEA,OAAO,SAASC,WAAT,GAAuB;AAC5B,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACX,UAAU,EAAX,CAAR;AAEA,WAAOY,KAAK,CAACH,MAAD,CAAL,CACJI,IADI,CACEC,QAAD,IAAcA,QAAQ,CAACX,IAAT,EADf,EAEJU,IAFI,CAEEV,IAAD,IAAU;AACZ;AACA,aAAOQ,QAAQ,CAACT,sBAAsB,CAACC,IAAI,CAACY,OAAN,CAAvB,CAAf;AACD,KALE,EAMFT,KAAD,IAAW;AACTU,MAAAA,OAAO,CAACC,GAAR,CAAa,SAAQX,KAAK,CAACY,OAAQ,EAAnC;AACAP,MAAAA,QAAQ,CAACN,uBAAuB,CAACC,KAAD,CAAxB,CAAR;AACD,KATE,CAAP;AAWD,GAdD;AAeD;;AAED,SAASa,YAAT,CAAsBC,KAAK,GAAGb,YAA9B,EAA4Cc,MAA5C,EAAoD;AAClD,UAAQA,MAAM,CAACpB,IAAf;AACE,SAAKJ,WAAL;AACE,+BAAYuB,KAAZ;AAAmBZ,QAAAA,UAAU,EAAE;AAA/B;;AACF,SAAKV,aAAL;AACE,+BAAYsB,KAAZ;AAAmBhB,QAAAA,IAAI,EAAEiB,MAAM,CAACjB,IAAhC;AAAsCI,QAAAA,UAAU,EAAE;AAAlD;;AACF,SAAKT,WAAL;AACE,+BAAYqB,KAAZ;AAAmBd,QAAAA,KAAK,EAAEe,MAAM,CAACf,KAAjC;AAAwCE,QAAAA,UAAU,EAAE;AAApD;;AACF;AACE,aAAOY,KAAP;AARJ;AAUD;;AACD,MAAME,WAAW,GAAG7B,eAAe,CAAC;AAAE0B,EAAAA;AAAF,CAAD,CAAnC;AAEA,MAAMI,KAAK,GAAG/B,WAAW,CAAC8B,WAAD,EAAc1B,mBAAmB,CAACF,eAAe,CAACC,KAAD,CAAhB,CAAjC,CAAzB;AAEA,eAAe4B,KAAf,C,CAEA;AACA","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst IS_FETCHING = 'IS_FETCHING';\nconst FETCH_SUCCESS = 'FETCH_SUCCESS';\nconst FETCH_ERROR = 'FETCH_ERROR';\n\nconst isFetching = () => ({\n  type: IS_FETCHING,\n});\n\nconst fetchDataActionCreator = (json) => ({\n  type: FETCH_SUCCESS,\n  data: json,\n});\n\nconst fetchErrorActionCreator = (error) => ({\n  type: FETCH_ERROR,\n  error,\n});\n\nconst initialState = {\n  data: [],\n  isfetching: false,\n};\n\nconst apiUrl = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nexport function handleFetch() {\n  return (dispatch) => {\n    dispatch(isFetching());\n\n    return fetch(apiUrl)\n      .then((response) => response.json())\n      .then((json) => {\n          // console.log(json.results);\n          return dispatch(fetchDataActionCreator(json.results));\n        },\n        (error) => {\n          console.log(`erro: ${error.message}`);\n          dispatch(fetchErrorActionCreator(error));\n        },\n      );\n  };\n}\n\nfunction fetchReducer(state = initialState, action) {\n  switch (action.type) {\n    case IS_FETCHING:\n      return { ...state, isfetching: true };\n    case FETCH_SUCCESS:\n      return { ...state, data: action.data, isfetching: false };\n    case FETCH_ERROR:\n      return { ...state, error: action.error, isfetching: false };\n    default:\n      return state;\n  }\n}\nconst rootReducer = combineReducers({ fetchReducer });\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n\n// Disscussed and did some pair programing with Paulo D'Andrea on this code\n// For the thunk used/got inspiration on \"doguinho app\" and \"game of thrones App\" of the TrybeCourse"]},"metadata":{},"sourceType":"module"}